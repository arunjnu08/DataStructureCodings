/*
The problem statement requires us to design a cache with the following methods:

    get(String key)
    set(String key, String value, int priority, int expiry)
    evictItem(int currentTime)

The rules by which the cache operates is are follows:

    1. If an expired item is available. Remove it. If multiple items have the same expiry, removing any one suffices.
    2. If condition #1 canâ€™t be satisfied, remove an item with the least priority.
    3. If more than one item satisfies condition #2, remove the least recently used one.
    4. Multiple items can have the same priority and expiry.

Untold rules:
All of those operations should be O(1) time and space complexity.

Note: get, set and evictItem methods of below problem takes o(log n) time.
*/

import java.util.*;

public class CachePriorityExpiryRevisit {
    class Node {
        String key, value;
        int priority, expiry;

        Node(String key, String value, int priority, int expiry) {
            this.key = key;
            this.value = value;
            this.priority = priority;
            this.expiry = expiry;
        }
    }

    private Map<String, Node> map;
    private TreeSet<Node> pqExpiry;
    private TreeSet<Node> pqPriority;

    CachePriorityExpiryRevisit() {
        map = new HashMap<>();
        pqExpiry = new TreeSet<>((a, b) -> a.expiry < b.expiry ? -1 : 1);
        pqPriority = new TreeSet<>((a, b) -> a.priority < b.priority ? -1 : 1);
    }

    public String get(String key) {
        if(!map.containsKey(key)) {
            return null;
        }
        Node node = map.get(key);
        pqExpiry.remove(node);
        pqPriority.remove(node);

        pqExpiry.add(node);
        pqPriority.add(node);

        return node.value;
    }

    public void set(String key, String value, int priority, int expiry) {
        Node node = new Node(key, value, priority, expiry);
        if(map.containsKey(key)) {
            Node temp = map.get(key);
            pqExpiry.remove(temp);
            pqPriority.remove(temp);
            map.remove(key);
        }

        map.put(key, node);
        pqExpiry.add(node);
        pqPriority.add(node);
    }

    public String evictItem(int curTime) {
        if(map.isEmpty()) {
            return null;
        }

        int minExpiry = pqExpiry.first().expiry;
        Node node = null;
        if(minExpiry < curTime) {
            node = pqExpiry.pollFirst();
            pqPriority.remove(node);
        } else {
            node = pqPriority.pollFirst();
            pqExpiry.remove(node);
        }
        map.remove(node.key);
        return node.value;
    }

    public static void main(String[] args) {
        CachePriorityExpiryRevisit cache = new CachePriorityExpiryRevisit();
        cache.set("A", "1", 2, 100);
        cache.set("B", "2", 3, 300);
        cache.set("C", "3", 2, 100);
        cache.set("D", "4", 2, 100);
        cache.set("E", "5", 1, 400);
        System.out.println(cache.get("D"));
        System.out.println(cache.get("C"));
        System.out.println(cache.evictItem(110));
        System.out.println(cache.evictItem(110));
        System.out.println(cache.evictItem(10));
        System.out.println(cache.evictItem(10));
        cache.set("F", "6", 2, 100);
        cache.set("G", "7", 2, 100);
        cache.set("H", "8", 2, 100);
        cache.set("I", "9", 2, 100);
        System.out.println(cache.evictItem(10));
        System.out.println(cache.evictItem(10));
        System.out.println(cache.evictItem(10));
        System.out.println(cache.evictItem(10));
        System.out.println(cache.evictItem(500));
        System.out.println(cache.evictItem(10));
    }
}
